using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

namespace Transpiler
{
    public class Transpiler
    {
        private readonly IFileWriter fileWriter;
        private readonly Configuration config;

        public Transpiler(Configuration config)
        {
            this.config = config;
            this.fileWriter = new DefaultFileWriter();
        }

        public Transpiler(Configuration config, IFileWriter fileWriter)
        {
            this.config = config;
            this.fileWriter = fileWriter;
        }

        public void Run(IEnumerable<Type> types)
        {
            this.fileWriter.CreateDirectory(this.config.TargetDirectory);

            // TODOs
            // 1. Create BaseTSTypes
            // 2. Create LinkedTSTypes
            // 3. Write Files
            // 3.1 Write imports
            // 3.2 Write export line
            // 3.3 Write properties

            foreach (var type in types)
            {
                var content = new List<string>();

                if (this.config.PrintGeneratedFileText)
                {
                    content.Add("// This file was generated by the CS2TS-Transpiler");
                    content.Add("");
                }

                content.Add($"export interface {type.Name} {{");

                var properties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);

                foreach (var prop in properties)
                {
                    var pt = prop.PropertyType;
                    content.Add($"    {prop.Name}: {this.TsTypeName(pt)};");
                }

                content.Add("}");

                var fileName = $"{type.Name}.ts";
                var subFolders = this.config.UseNamespacesAsFolders
                    ? type.Namespace.Replace(".", "\\")
                    : "";
                var filePath = Path.Combine(this.config.TargetDirectory, subFolders, fileName);
                this.fileWriter.CreateFile(filePath, content);
            }

        }

        string TsTypeName(Type type)
        {
            var tsTypeName = "any";

            var isEnumerable = type != typeof(string) && typeof(IEnumerable).IsAssignableFrom(type);

            if (isEnumerable)
                type = type.GetGenericArguments().First();

            if (type.Name == typeof(int).Name) tsTypeName = "number";
            if (type.Name == typeof(string).Name) tsTypeName = "string";
            if (type.Name == typeof(bool).Name) tsTypeName = "boolean";
            if (type.Name == typeof(DateTime).Name) tsTypeName = "Date";
            if (type.Name == typeof(DateTimeOffset).Name) tsTypeName = "Date";

            if (isEnumerable)
                tsTypeName = tsTypeName + "[]";

            return tsTypeName;
        }
    }
}



